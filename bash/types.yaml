tosca_definitions_version: alien_dsl_2_0_0

# Copyright (C) 2020 Open Telekom Cloud - T-Systems International GmbH.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

metadata:
  template_name: otc.paas.scripts
  template_version: 1.0.0
  template_author: Tri

description: >
  Scripts component with basic operations (i.e., create, configure, start, stop, delete)
  for users to specify and execute on a target node.

imports:
  - tosca-normative-types:1.0.0-ALIEN20

node_types:
  otc.nodes.SoftwareComponent.Bash:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A bash script component with basic operations (i.e., create, configure, start, stop, delete)
      for users to specify and execute on a target node.
    tags:
      icon: /images/bash.png
    properties:
      component_version:
        type: version
        description: Version of the software component
        default: 1.0
      env:
        type: map
        description: >
          Define a map of key/value pair. In the bash, the map presents as a json string.
          For example add an entry of foo / bar results the variable env as: {'foo': 'bar'}. Then you may use "jq" to parse the json.
        required: false
        entry_schema:
          type: string
    capabilities:
      script_endpoint:
        type: tosca.capabilities.Endpoint.Script
    requirements:
      - connect_to_script:
          capability: tosca.capabilities.Endpoint.Script
          relationship: otc.relationships.ConnectToScriptComponent
          occurrences: [0, 1]
    interfaces:
      Standard:
        # create:
        #   inputs:
        #     component_version: { get_property: [SELF, component_version] }
        #     env: { get_property: [SELF, env] }
        #   implementation: scripts/create.sh
        configure:
          inputs:
            COMPONENT_VERSION: { get_property: [SELF, component_version] }
            ENV: { get_property: [SELF, env] }
            PROTOCOL: { get_property: [SELF, script_endpoint, protocol] }
            PORT: { get_property: [SELF, script_endpoint, port] }
            URL_PATH: { get_property: [SELF, script_endpoint, url_path] }
            PORT_NAME: { get_property: [SELF, script_endpoint, port_name] }
          implementation: scripts/configure.sh
        start:
          inputs:
            COMPONENT_VERSION: { get_property: [SELF, component_version] }
            ENV: { get_property: [SELF, env] }
            PROTOCOL: { get_property: [SELF, script_endpoint, protocol] }
            PORT: { get_property: [SELF, script_endpoint, port] }
            URL_PATH: { get_property: [SELF, script_endpoint, url_path] }
            PORT_NAME: { get_property: [SELF, script_endpoint, port_name] }
          implementation: scripts/start.sh
        stop:
          inputs:
            COMPONENT_VERSION: { get_property: [SELF, component_version] }
            ENV: { get_property: [SELF, env] }
            PROTOCOL: { get_property: [SELF, script_endpoint, protocol] }
            PORT: { get_property: [SELF, script_endpoint, port] }
            URL_PATH: { get_property: [SELF, script_endpoint, url_path] }
            PORT_NAME: { get_property: [SELF, script_endpoint, port_name] }
          implementation: scripts/stop.sh
        # delete:
        #   inputs:
        #     component_version: { get_property: [SELF, component_version] }
        #     env: { get_property: [SELF, env] }
        #   implementation: scripts/delete.sh
    artifacts:
      # - create:
      #     type: tosca.artifacts.File
      #     description: Specify a bash script to execute when this node is created.
      #     file: examples/create.sh
      - pre_configure_source:
          type: tosca.artifacts.File
          description: Specify a bash script to pre-configure the source node (when it connects to a target node).
          file: examples/pre_configure_source.sh
      - configure:
          type: tosca.artifacts.File
          description: Specify a bash script to execute when this node is configured.
          file: examples/configure.sh
      - start:
          type: tosca.artifacts.File
          description: Specify a bash script to execute when this node starts.
          file: examples/start.sh
      - stop:
          type: tosca.artifacts.File
          description: Specify a bash script to execute when this node stops.
          file: examples/stop.sh
      # - delete:
      #     type: tosca.artifacts.File
      #     description: Specify a bash script to execute when this node is deleted.
      #     file: examples/delete.sh
      # - add_target:
      #     type: tosca.artifacts.File
      #     description: Specify a bash script to notify the source node that a target node is added via a relationship.
      #     file: examples/add_target.sh
      - add_source:
          type: tosca.artifacts.File
          description: Specify a bash script to notify the target node that a source node is now available via a relationship.
          file: examples/add_source.sh
      # - remove_target:
      #     type: tosca.artifacts.File
      #     description: Specify a bash script to notify the source node that a target node is removed.
      #     file: examples/remove_target.sh
      # - remove_source:
      #     type: tosca.artifacts.File
      #     description: Specify a bash script to notify the target node that a source node is removed.
      #     file: examples/remove_source.sh


relationship_types:
  otc.relationships.ConnectToScriptComponent:
    derived_from: tosca.relationships.ConnectsTo
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SOURCE_COMPONENT_VERSION: { get_property: [SOURCE, component_version] }
            SOURCE_ENV: {get_property: [SOURCE, env]}
            SOURCE_IP: { get_attribute: [SOURCE, ip_address] }
            SOURCE_PORT: { get_property: [SOURCE, script_endpoint, port] }
            SOURCE_PROTOCOL: {get_property: [SOURCE, script_endpoint, protocol]}
            SOURCE_URL_PATH: {get_property: [SOURCE, script_endpoint, url_path]}
            SOURCE_PORT_NAME: {get_property: [SOURCE, script_endpoint, port_name]}
            TARGET_COMPONENT_VERSION: { get_property: [TARGET, component_version] }
            TARGET_ENV: {get_property: [TARGET, env]}
            TARGET_IP: { get_attribute: [TARGET, ip_address] }
            TARGET_PORT: { get_property: [TARGET, script_endpoint, port] }
            TARGET_PROTOCOL: {get_property: [TARGET, script_endpoint, protocol]}
            TARGET_URL_PATH: {get_property: [TARGET, script_endpoint, url_path]}
            TARGET_PORT_NAME: {get_property: [TARGET, script_endpoint, port_name]}
          implementation: scripts/pre_configure_source.sh
        # pre_configure_target:
        #   inputs:
        #     SOURCE_IP: { get_attribute: [SOURCE, ip_address] }
        #     SOURCE_PORT: { get_property: [SOURCE, endpoint, port] }
        #     SOURCE_PROTOCOL: {get_property: [SOURCE, endpoint, protocol]}
        #   implementation: scripts/pre_configure_target.sh
        # add_target:
        #   implementation: scripts/add_target.sh
        add_source:
          implementation: scripts/add_source.sh
        # remove_target:
        #   implementation: scripts/remove_target.sh
        # remove_source:
        #   implementation: scripts/remove_source.sh


capability_types:
  tosca.capabilities.Endpoint.Script:
    derived_from: tosca.capabilities.Endpoint